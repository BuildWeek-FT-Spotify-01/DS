# -*- coding: utf-8 -*-
"""Upload to SQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vs-bo2Dmw64SKATo-9LkaGpBjrLcW1tl
"""

import pandas as pd
import psycopg2

df = pd.read_csv('/content/tracks_features.csv')
text_col = ['id', 'name', 'album', 'album_id', 'artists', 'artist_ids']
for col in text_col:
  df[col] = df[col].str.replace(',', ' ')
  df[col] = df[col].str.replace(':', ' ')
  df[col] = df[col].str.replace('(', '')
  df[col] = df[col].str.replace(')', '')
  df[col] = df[col].str.replace('-', ' ')
  df[col] = df[col].str.replace('/', ' ')
  df[col] = df[col].str.replace('\\', ' ')
  df[col] = df[col].str.replace('[', '')
  df[col] = df[col].str.replace("'", '')
  df[col] = df[col].str.replace("]", '')
  df[col] = df[col].str.lower()
df.head()

type(df)

df.info()

con = psycopg2.connect(dbname = 'qgklpoko', user = 'qgklpoko',
                       password = 'ay_DriUGUMiRZAr8aeGKEaJECK4s4Zgx',
                       host = 'kashin.db.elephantsql.com')

cur = con.cursor()

cur.execute(""" DROP TABLE IF EXISTS data""")
cur.execute("""CREATE TABLE data(
  index SERIAL PRIMARY KEY,
  id VARCHAR(2048),
  name VARCHAR(2048),
  album VARCHAR(2048),
  album_id VARCHAR(2048),
  artists VARCHAR(2048),
  artist_id VARCHAR(2048),
  track_number INT,
  disc_number INT,
  explicit BOOL,
  danceability FLOAT,
  energy FLOAT,
  key INT,
  loudness FLOAT,
  mode INT,
  speechiness FLOAT,
  acousticness FLOAT,
  instrumentalness FLOAT,
  liveness FLOAT,
  valence FLOAT,
  tempo FLOAT,
  duration_ms INT,
  time_signature FLOAT,
  year FLOAT,
  release_date VARCHAR(2048)
)
"""
)
con.commit()

df.to_csv('data.csv', encoding = 'utf-8')

with open('data.csv') as d:
  next(d)
  cur.copy_from(d, 'data', sep = ',')

con.commit()

cur.execute("""ALTER TABLE data DROP id""")
con.commit()

cur.execute(""" DROP TABLE IF EXISTS features""")
cur.execute(""" CREATE TABLE features as SELECT DISTINCT index, explicit, danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo, duration_ms, time_signature, year FROM data ORDER BY index""")
con.commit()

cur.execute(""" DROP TABLE IF EXISTS target""")
cur.execute(""" CREATE TABLE target as SELECT DISTINCT index, name, album, album_id, artists, artist_id, track_number, disc_number FROM data ORDER BY index""")
con.commit()

cur.close()
cur.close()